{
	"info": {
		"_postman_id": "2b613b82-3cad-4ae2-9efa-7d684586d6bb",
		"name": "Car-builder",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "27052352",
		"_collection_link": "https://solar-spaceship-58974.postman.co/workspace/Practicum-filmorate~60362f94-0045-489a-bfb3-bf04644d1b6e/collection/27052352-2b613b82-3cad-4ae2-9efa-7d684586d6bb?action=share&source=collection_link&creator=27052352"
	},
	"item": [
		{
			"name": "getAllCarWheels",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should exist\", function () {\r",
							"    pm.response.to.be.ok; // Проверка, что ответ существует\r",
							"});\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain at least one item\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.length.above(0);\r",
							"});\r",
							"pm.test(\"Each item should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should contain wheelsSize\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"wheelsSize\");\r",
							"});\r",
							"pm.test(\"WheelsSize should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[0].wheelsSize).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelsSize should contain sizeName\", function () {\r",
							"    pm.expect(pm.response.json()[0].wheelsSize).to.have.property(\"sizeName\");\r",
							"});\r",
							"\r",
							"// Повторите тесты для второго элемента массива (index 1)\r",
							"pm.test(\"WheelsSize should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[1].wheelsSize).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelsSize should contain sizeName\", function () {\r",
							"    pm.expect(pm.response.json()[1].wheelsSize).to.have.property(\"sizeName\");\r",
							"});\r",
							"\r",
							"// Повторите тесты для третьего элемента массива (index 2)\r",
							"pm.test(\"WheelsSize should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[2].wheelsSize).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelsSize should contain sizeName\", function () {\r",
							"    pm.expect(pm.response.json()[2].wheelsSize).to.have.property(\"sizeName\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/wheels"
			},
			"response": []
		},
		{
			"name": "getAllCarBody",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should exist\", function () {\r",
							"    pm.response.to.be.ok; // Проверка, что ответ существует\r",
							"});\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain at least one item\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.length.above(0);\r",
							"});\r",
							"pm.test(\"Each item should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should contain bodiesType\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"bodiesType\");\r",
							"});\r",
							"pm.test(\"BodiesType should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[0].bodiesType).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"BodiesType should contain typeName\", function () {\r",
							"    pm.expect(pm.response.json()[0].bodiesType).to.have.property(\"typeName\");\r",
							"});\r",
							"\r",
							"// Повторите тесты для второго элемента массива (index 1)\r",
							"pm.test(\"BodiesType should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[1].bodiesType).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"BodiesType should contain typeName\", function () {\r",
							"    pm.expect(pm.response.json()[1].bodiesType).to.have.property(\"typeName\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/body"
			},
			"response": []
		},
		{
			"name": "createCar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should exist\", function () {\r",
							"    pm.response.to.have.status(201); // Проверка, что ответ существует\r",
							"});\r",
							"pm.test(\"Response should contain id\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain wheelDto\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"wheelDto\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain wheelsAmount\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"wheelsAmount\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain body\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"body\");\r",
							"});\r",
							"pm.test(\"WheelDto should contain id\", function () {\r",
							"    pm.expect(pm.response.json().wheelDto).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelDto should contain wheelsSize\", function () {\r",
							"    pm.expect(pm.response.json().wheelDto).to.have.property(\"wheelsSize\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelsSize should contain id\", function () {\r",
							"    pm.expect(pm.response.json().wheelDto.wheelsSize).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelsSize should contain sizeName\", function () {\r",
							"    pm.expect(pm.response.json().wheelDto.wheelsSize).to.have.property(\"sizeName\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body should contain id\", function () {\r",
							"    pm.expect(pm.response.json().body).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body should contain bodiesType\", function () {\r",
							"    pm.expect(pm.response.json().body).to.have.property(\"bodiesType\");\r",
							"});\r",
							"\r",
							"pm.test(\"BodiesType should contain id\", function () {\r",
							"    pm.expect(pm.response.json().body.bodiesType).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"BodiesType should contain typeName\", function () {\r",
							"    pm.expect(pm.response.json().body.bodiesType).to.have.property(\"typeName\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"wheelId\": 1,\r\n  \"wheelsAmount\": 4,\r\n  \"bodyId\": 2,\r\n  \"name\": \"Lada Kalina\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/cars"
			},
			"response": []
		},
		{
			"name": "getCars",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should exist\", function () {\r",
							"    pm.response.to.be.ok; // Проверка, что ответ существует\r",
							"});\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain at least one item\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.length.above(0);\r",
							"});\r",
							"pm.test(\"Each item should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should contain wheelDto\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"wheelDto\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should contain wheelsAmount\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"wheelsAmount\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should contain body\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"body\");\r",
							"});\r",
							"pm.test(\"WheelDto should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[0].wheelDto).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelDto should contain wheelsSize\", function () {\r",
							"    pm.expect(pm.response.json()[0].wheelDto).to.have.property(\"wheelsSize\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelsSize should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[0].wheelDto.wheelsSize).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelsSize should contain sizeName\", function () {\r",
							"    pm.expect(pm.response.json()[0].wheelDto.wheelsSize).to.have.property(\"sizeName\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[0].body).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body should contain bodiesType\", function () {\r",
							"    pm.expect(pm.response.json()[0].body).to.have.property(\"bodiesType\");\r",
							"});\r",
							"\r",
							"pm.test(\"BodiesType should contain id\", function () {\r",
							"    pm.expect(pm.response.json()[0].body.bodiesType).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"BodiesType should contain typeName\", function () {\r",
							"    pm.expect(pm.response.json()[0].body.bodiesType).to.have.property(\"typeName\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/cars"
			},
			"response": []
		},
		{
			"name": "get car by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should exist\", function () {\r",
							"    pm.response.to.be.ok; // Проверка, что ответ существует\r",
							"});\r",
							"pm.test(\"Response should contain id\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain wheelDto\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"wheelDto\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain wheelsAmount\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"wheelsAmount\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain body\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"body\");\r",
							"});\r",
							"pm.test(\"WheelDto should contain id\", function () {\r",
							"    pm.expect(pm.response.json().wheelDto).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelDto should contain wheelsSize\", function () {\r",
							"    pm.expect(pm.response.json().wheelDto).to.have.property(\"wheelsSize\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelsSize should contain id\", function () {\r",
							"    pm.expect(pm.response.json().wheelDto.wheelsSize).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"WheelsSize should contain sizeName\", function () {\r",
							"    pm.expect(pm.response.json().wheelDto.wheelsSize).to.have.property(\"sizeName\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body should contain id\", function () {\r",
							"    pm.expect(pm.response.json().body).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body should contain bodiesType\", function () {\r",
							"    pm.expect(pm.response.json().body).to.have.property(\"bodiesType\");\r",
							"});\r",
							"\r",
							"pm.test(\"BodiesType should contain id\", function () {\r",
							"    pm.expect(pm.response.json().body.bodiesType).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"BodiesType should contain typeName\", function () {\r",
							"    pm.expect(pm.response.json().body.bodiesType).to.have.property(\"typeName\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/cars/1"
			},
			"response": []
		}
	]
}